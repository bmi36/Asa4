Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
+++ .idea/misc.xml	(revision 1651ad6f52bad01c4a4faf7aab422d1b86127ace)
@@ -5,7 +5,7 @@
       <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
     </configurations>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="JDK" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/src/main/java/com/example/asaco2/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/asaco2/MainActivity.kt	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
+++ app/src/main/java/com/example/asaco2/MainActivity.kt	(revision 1651ad6f52bad01c4a4faf7aab422d1b86127ace)
@@ -8,13 +8,16 @@
 import android.content.Intent
 import android.content.SharedPreferences
 import android.content.pm.PackageManager
+import android.hardware.Sensor
+import android.hardware.SensorEvent
+import android.hardware.SensorEventListener
+import android.hardware.SensorManager
 import android.net.Uri
 import android.os.Bundle
 import android.os.Environment
 import android.provider.MediaStore
 import android.view.LayoutInflater
 import android.view.inputmethod.InputMethodManager
-import android.widget.Toast
 import androidx.appcompat.app.ActionBarDrawerToggle
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.app.ActivityCompat
@@ -29,16 +32,16 @@
 import com.example.asaco2.ui.camera.CameraResult
 import com.example.asaco2.ui.gallery.GalleryFragment
 import com.example.asaco2.ui.home.Calendar
-import com.example.asaco2.ui.home.CalendarEntity
-import com.example.asaco2.ui.home.CalendarViewModel
+import com.example.asaco2.ui.home.Step
+import com.example.asaco2.ui.home.StepViewModel
 import com.example.asaco2.ui.tools.ToolsFragment
 import com.google.android.material.navigation.NavigationView
 import kotlinx.android.synthetic.main.activity_main.*
 import kotlinx.android.synthetic.main.app_bar_main.*
-import kotlinx.android.synthetic.main.fragment_tools.view.*
 import kotlinx.android.synthetic.main.nav_header_main.view.*
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Job
+import kotlinx.coroutines.launch
 import java.io.File
 import java.text.SimpleDateFormat
 import java.util.*
@@ -49,18 +52,20 @@
 const val CAMERA_PERMISSION_REQUEST_CODE = 2
 const val HUNTER = "Ê¢ÖÁî∞„Å≤„Çç„Åó"
 
-class MainActivity : AppCompatActivity(), CoroutineScope,ToolsFragment.FinishBtn {
+class MainActivity : AppCompatActivity(), CoroutineScope, ToolsFragment.FinishBtn,
+    SensorEventListener {
 
     private lateinit var setFragment: Fragment
-
-    // Passing each menu ID as a set of Ids because each
-    // menu should be considered as top level destinations.
+    private var mSensorManager: SensorManager? = null
+    private var mStepCounterSensor: Sensor? = null
+    private var mStepDetectorSensor: Sensor? = null
+    private lateinit var prefs: SharedPreferences
+    private var stepcount = 0
 
     private val appBarConfiguration: AppBarConfiguration by lazy {
         AppBarConfiguration(
-            setOf(
-                R.id.nav_calendar, R.id.nav_gallery, R.id.nav_slideshow, R.id.nav_tools
-            ), drawer_layout
+            setOf(R.id.nav_calendar, R.id.nav_gallery, R.id.nav_slideshow, R.id.nav_tools),
+            drawer_layout
         )
     }
 
@@ -83,7 +88,7 @@
 
                     R.id.nav_gallery -> {
                         toolbar.title = "ÂæíÊ≠©"
-                        action(GalleryFragment())
+                        action(GalleryFragment(stepcount))
                     }
 
                     R.id.nav_tools -> {
@@ -100,6 +105,11 @@
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
 
+        launch {
+            mSensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
+            mStepCounterSensor = mSensorManager?.getDefaultSensor(Sensor.TYPE_STEP_COUNTER)
+        }
+
         title = "„Ç´„É¨„É≥„ÉÄ„ÉºÁîªÈù¢"
 
         setSupportActionBar(toolbar)
@@ -121,7 +131,7 @@
             drawer_layout.addDrawerListener(it)
             it.syncState()
         }
-
+        prefs = getSharedPreferences("Cock", Context.MODE_PRIVATE)
         setFragment = Calendar()
         setHeader(navView)
         navView.setCheckedItem(R.id.nav_calendar)
@@ -252,18 +262,19 @@
         }
     }
 
-    private val event = DayilyEventController(0,0)
+    private val dayFlg = DayilyEventController(0, 0)
+
     @SuppressLint("SetTextI18n", "CommitPrefEdits")
     override fun onStart() {
         getSharedPreferences("Cock", Context.MODE_PRIVATE).run {
-            if (!event.isDoneDaily()){
+            if (!dayFlg.isDoneDaily()) {
                 this.edit().clear().apply()
-                event.execute()
+                dayFlg.execute()
             }
 
             navView.getHeaderView(0).run {
                 Cal.text = "ÊëÇÂèñ‚áí${getInt("calory", 0)}cal"
-                barn.text = "Ê∂àË≤ª‚áí${getInt("burn",0)}cal"
+                barn.text = "Ê∂àË≤ª‚áí${getInt("burn", 0)}cal"
             }
         }
 
@@ -278,9 +289,34 @@
         navView.setCheckedItem(R.id.nav_calendar)
         action(Calendar())
     }
+
+    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {}
+
+    override fun onSensorChanged(event: SensorEvent?) {
+        event?.values?.let {
+            if (event.sensor.type == Sensor.TYPE_STEP_COUNTER) {
+                stepcount++
+            }
+        }
+        if (!dayFlg.isDoneDaily()) {
+            stepcount = 0
+            prefs.edit().clear().apply()
+        }
+    }
+
+    override fun onResume() {
+        mSensorManager?.registerListener(this, mStepCounterSensor, SensorManager.SENSOR_DELAY_NORMAL)
+        super.onResume()
+    }
+
+    override fun onStop() {
+        super.onStop()
+        mSensorManager?.unregisterListener(this, mStepCounterSensor)
+    }
 }
+
 @SuppressLint("SimpleDateFormat")
-val today = SimpleDateFormat("yyyyÂπ¥MMÊúàddÊó•").run{ format(Date(System.currentTimeMillis())) }
+val today: String = SimpleDateFormat("yyyyÂπ¥MMÊúàddÊó•").run { format(Date(System.currentTimeMillis())) }
 
 fun hideKeyboard(activity: Activity) {
     val view = activity.currentFocus
Index: app/src/main/java/com/example/asaco2/ui/gallery/GalleryFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/asaco2/ui/gallery/GalleryFragment.kt	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
+++ app/src/main/java/com/example/asaco2/ui/gallery/GalleryFragment.kt	(revision 1651ad6f52bad01c4a4faf7aab422d1b86127ace)
@@ -9,7 +9,7 @@
 import com.example.asaco2.today
 import kotlinx.android.synthetic.main.fragment_gallery.*
 
-class GalleryFragment : Fragment() {
+class GalleryFragment(val step: Int) : Fragment() {
 
     override fun onCreateView(
         inflater: LayoutInflater,
@@ -22,7 +22,7 @@
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
 
-        dayText.text = today.toString()
+        dayText.text = today
         childFragmentManager.beginTransaction().add(frame.id,GraphFragment()).commitNow()
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/asaco2/ui/gallery/GalleryViewModel.kt
===================================================================
--- app/src/main/java/com/example/asaco2/ui/gallery/GalleryViewModel.kt	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
+++ app/src/main/java/com/example/asaco2/ui/gallery/GalleryViewModel.kt	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
@@ -1,13 +0,0 @@
-package com.example.asaco2.ui.gallery
-
-import androidx.lifecycle.LiveData
-import androidx.lifecycle.MutableLiveData
-import androidx.lifecycle.ViewModel
-
-class GalleryViewModel : ViewModel() {
-
-    private val _text = MutableLiveData<String>().apply {
-        value = "This is gallery Fragment"
-    }
-    val text: LiveData<String> = _text
-}
\ No newline at end of file
Index: app/src/main/java/com/example/asaco2/ui/home/CalendarDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/asaco2/ui/home/CalendarDao.kt	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
+++ app/src/main/java/com/example/asaco2/ui/home/CalendarDao.kt	(revision 1651ad6f52bad01c4a4faf7aab422d1b86127ace)
@@ -10,10 +10,10 @@
 interface CalendarDao {
 
     //üí©
-    @Query("select * from Entity")
+    @Query("select * from CalendarEntity")
     fun getEntity(): LiveData<Array<CalendarEntity>>
 
-    @Query("select * from Entity where id like :id || '%'")
+    @Query("select * from CalendarEntity where id like :id || '%'")
     fun getEntity(id: Long): List<CalendarEntity>?
 
     //„É™„Çπ„Éà„Å´ËøΩÂä†
@@ -25,4 +25,17 @@
     suspend fun update(entity: CalendarEntity)
 
 
+}
+
+@Dao
+interface StepDao{
+
+    @Query("select * from StepEntity where id like :date || '%'")
+    fun getEntity(date: Long): LiveData<Array<Step>>
+
+    @Insert
+    suspend fun insert(entity: Step)
+
+    @Update
+    suspend fun update(entity: Step)
 }
\ No newline at end of file
Index: app/src/main/java/com/example/asaco2/ui/home/CalendarDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/asaco2/ui/home/CalendarDatabase.kt	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
+++ app/src/main/java/com/example/asaco2/ui/home/CalendarDatabase.kt	(revision 1651ad6f52bad01c4a4faf7aab422d1b86127ace)
@@ -22,3 +22,17 @@
                 }
     }
 }
+
+@Database(entities = [Step::class],version = 1)
+abstract class StepDataBase: RoomDatabase(){
+    abstract fun dao(): StepDao
+
+    companion object{
+        @Volatile
+        private var instance: StepDataBase? = null
+        fun getInstance(context: Context): StepDataBase = instance ?:
+                synchronized(this){
+                    Room.databaseBuilder(context,StepDataBase::class.java,"step_db").build()
+                }
+    }
+}
Index: app/src/main/java/com/example/asaco2/ui/home/CalendarEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/asaco2/ui/home/CalendarEntity.kt	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
+++ app/src/main/java/com/example/asaco2/ui/home/CalendarEntity.kt	(revision 1651ad6f52bad01c4a4faf7aab422d1b86127ace)
@@ -5,7 +5,7 @@
 import androidx.room.PrimaryKey
 import java.io.Serializable
 
-@Entity(tableName = "Entity")
+@Entity(tableName = "CalendarEntity")
 data class CalendarEntity(
 
     @PrimaryKey
@@ -21,3 +21,12 @@
 
 ):Serializable
 
+
+@Entity(tableName = "StepEntity")
+data class Step(
+    @PrimaryKey
+    val id: Long,
+    @ColumnInfo(name = "entity_step")
+    val step: Int
+)
+
Index: app/src/main/java/com/example/asaco2/ui/home/CalendarRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/asaco2/ui/home/CalendarRepository.kt	(revision 1651ad6f52bad01c4a4faf7aab422d1b86127ace)
+++ app/src/main/java/com/example/asaco2/ui/home/CalendarRepository.kt	(revision 1651ad6f52bad01c4a4faf7aab422d1b86127ace)
@@ -0,0 +1,26 @@
+package com.example.asaco2.ui.home
+
+import androidx.annotation.WorkerThread
+import androidx.lifecycle.LiveData
+class CalendarRepository(private val dao: CalendarDao) {
+    val allEntity: LiveData<Array<CalendarEntity>> = dao.getEntity()
+
+    @WorkerThread
+    suspend fun insert(entity: CalendarEntity){ dao.insert(entity) }
+
+    suspend fun update(entity: CalendarEntity){ dao.update(entity) }
+
+    fun getCalendar(id: Long): List<CalendarEntity>? { return dao.getEntity(id) }
+
+}
+
+class StepRepository(private val dao: StepDao,private val data: Long){
+    val allEntity: LiveData<Array<Step>> = dao.getEntity(data)
+
+    @WorkerThread
+
+    suspend fun insert(step: Step) = dao.update(step)
+
+    suspend fun update(step: Step) = dao.update(step)
+}
+
Index: app/src/main/java/com/example/asaco2/ui/home/CalendarViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/asaco2/ui/home/CalendarViewModel.kt	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
+++ app/src/main/java/com/example/asaco2/ui/home/CalendarViewModel.kt	(revision 1651ad6f52bad01c4a4faf7aab422d1b86127ace)
@@ -3,34 +3,55 @@
 import android.app.Application
 import androidx.lifecycle.AndroidViewModel
 import androidx.lifecycle.LiveData
+import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import kotlinx.coroutines.launch
-import kotlinx.coroutines.runBlocking
 import java.sql.SQLException
 
-class CalendarViewModel(application: Application):AndroidViewModel(application) {
+class CalendarViewModel(application: Application) : AndroidViewModel(application) {
 
-    private val repository: Repository
-    val allCalendar: LiveData<Array<CalendarEntity>>
-    lateinit var SelectCalendar: LiveData<CalendarEntity>
+    private val calendarRepository: CalendarRepository
+    private val allCalendar: LiveData<Array<CalendarEntity>>
     private var repoDao: CalendarDao = CalendarDatabase.getInstance(application).calendarDao()
 
     init {
-        repository = Repository(repoDao)
-            allCalendar = repository.allEntity
+        calendarRepository = CalendarRepository(repoDao)
+        allCalendar = calendarRepository.allEntity
     }
 
-    fun insert(entity: CalendarEntity) = viewModelScope.launch { repository.insert(entity) }
+    fun insert(entity: CalendarEntity) = viewModelScope.launch { calendarRepository.insert(entity) }
 
-    fun update(entity: CalendarEntity) = viewModelScope.launch { repository.update(entity) }
+    fun update(entity: CalendarEntity) = viewModelScope.launch { calendarRepository.update(entity) }
 
     fun InsertOrUpdata(entity: CalendarEntity) = viewModelScope.launch {
         try {
-            repository.insert(entity)
-        }catch (e:SQLException){
+            calendarRepository.insert(entity)
+        } catch (e: SQLException) {
+            e.printStackTrace()
+            calendarRepository.update(entity)
+        }
+    }
+
+    fun getCalendar(id: Long): List<CalendarEntity>? = calendarRepository.getCalendar(id)
+}
+
+class StepViewModel(application: Application, date: Long) : ViewModel() {
+    private val stepRepository: StepRepository
+
+    private var repoDao: StepDao = StepDataBase.getInstance(application).dao()
+
+    init {
+        stepRepository = StepRepository(repoDao, date)
+    }
+
+    fun insert(step: Step) = viewModelScope.launch { repoDao.insert(step) }
+    fun update(step: Step) = viewModelScope.launch { repoDao.update(step) }
+    fun InsertOrUpdata(entity: Step) = viewModelScope.launch {
+        try {
+            stepRepository.insert(entity)
+        } catch (e: SQLException) {
             e.printStackTrace()
-            repository.update(entity)
+            stepRepository.update(entity)
         }
     }
-    fun getCalendar(id: Long): List<CalendarEntity>? = repository.getCalendar(id)
 }
\ No newline at end of file
Index: app/src/main/java/com/example/asaco2/ui/home/Repository.kt
===================================================================
--- app/src/main/java/com/example/asaco2/ui/home/Repository.kt	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
+++ app/src/main/java/com/example/asaco2/ui/home/Repository.kt	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
@@ -1,21 +0,0 @@
-package com.example.asaco2.ui.home
-
-import androidx.annotation.WorkerThread
-import androidx.lifecycle.LiveData
-class Repository(private val dao: CalendarDao) {
-    val allEntity: LiveData<Array<CalendarEntity>> = dao.getEntity()
-
-    @WorkerThread
-    suspend fun insert(entity: CalendarEntity){
-        dao.insert(entity)
-    }
-
-    suspend fun update(entity: CalendarEntity){
-        dao.update(entity)
-    }
-    fun getCalendar(id: Long): List<CalendarEntity>? {
-        return dao.getEntity(id)
-    }
-
-}
-
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision 5bbed808c9fb9d6e8235cf8d8e909fba6f3862e5)
+++ build.gradle	(revision 1651ad6f52bad01c4a4faf7aab422d1b86127ace)
@@ -1,7 +1,7 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 
 buildscript {
-    ext.kotlin_version = '1.3.61'
+    ext.kotlin_version = '1.3.41'
     repositories {
         google()
         jcenter()
